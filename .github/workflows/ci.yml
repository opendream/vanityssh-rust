name: CI

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '*.md'
      - 'LICENSE*'
      - '.gitignore'
      - 'docs/**'
  pull_request:
    branches: [ main, master ]
    paths-ignore:
      - '*.md'
      - 'LICENSE*'
      - '.gitignore'
      - 'docs/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --check

      - name: Check lints
        run: cargo clippy --all-targets -- -D warnings

      - name: Run tests
        run: cargo test

  build:
    needs: [check]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Build in debug mode
        run: cargo build

      - name: Build in release mode
        run: cargo build --release

      - name: Upload release binary (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: vanityssh-rust-linux
          path: target/release/vanityssh-rust

      - name: Upload release binary (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: vanityssh-rust-macos
          path: target/release/vanityssh-rust

      - name: Upload release binary (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: vanityssh-rust-windows
          path: target/release/vanityssh-rust.exe